/*
 * Implementations of array2d.hh
 */

#include <iostream>

template <class T>
Array2D<T>::Array2D(unsigned width, unsigned height)
{
	m_width = width;
	m_height = height;
	m_values = new T[m_width * m_height];
}

template <class T>
Array2D<T>::~Array2D()
{
	delete[] m_values;
}

template <class T>
unsigned Array2D<T>::get_width() const
{
	return m_width;
}

template <class T>
unsigned Array2D<T>::get_height() const
{
	return m_height;
}

template <class T>
void Array2D<T>::set(int x, int y, T value)
{
	m_values[x + y * m_width] = value;
}

template <class T>
T Array2D<T>::get(int x, int y) const
{
	return m_values[x + y * m_width];
}

template <class T>
T & Array2D<T>::at(int x, int y) const
{
	return m_values[x + y *m_width];
}

template <class T>
void Array2D<T>::debug() const
{
	for (unsigned j = 0; j < m_height; j++) {
		for (unsigned i = 0; i < m_width; i++) {
			std::cout << get(i, j) << " ";
		}

		std::cout << std::endl;
	}
}
